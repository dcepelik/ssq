#!/usr/bin/env python3

import urllib
import re
import sys
from bs4 import BeautifulSoup
import os
import subprocess
from optparse import OptionParser

def tty():
    return os.isatty(1) and os.isatty(2)

def e(t):
    return "\033[1;7;31m {} \033[0m".format(t) if tty() else t

def it(t):
    return "\033[3m{}\033[0m".format(t) if tty() else t

def b(t):
    return "\033[1m{}\033[0m".format(t) if tty() else t

def contract(s):
    return re.sub(r'\s+', ' ', s) if s else ''

def ss(el):
    return el.string.strip()

def fmts(el):
    if el.name == 'a':
        return b(ss(el))
    if el.name == 'span':
        cls = el.get_attribute_list('class')
        if 'help' in cls:
            return it(ss(el))
        if 'bold' in cls:
            return b(ss(el))
    return el.string if el.string else el.text

def strings(el):
    return [fmts(c) for c in el]

def textify(el):
    return contract(''.join(strings(el)).strip())

def lines(el):
    lines = [[]]
    for c in el:
        if c.name == 'br':
            lines.append([])
        lines[-1].append(c)
    return lines

def fix(t):
    t = re.sub(r' ([;:,!?/\)])', r'\1', t)
    t = re.sub(r'(/) ', r'\1', t)
    return t

def bull(t):
    return " \u26AB {}".format(t)

def indent(t):
    return "    {}".format(t)

def bullterms(el):
    for i, l in enumerate(lines(el)):
        t = fix(textify(l))
        if not t:
            continue
        print(bull(t) if i == 0 else indent(t))

parser = OptionParser()
parser.add_option('-a', dest='all', action='store_true', default=False,
    help='Show full dictionary listing.')
parser.add_option('-p', dest='pron', action='store_true', default=False,
    help='Pronounce the word.')
options, args = parser.parse_args()

term = args.pop(0)
lang = 'en'
if args:
    lang = args.pop(0)
qs = urllib.parse.urlencode({'q': term, 'shortView': 0})
resp = urllib.request.urlopen('https://slovnik.seznam.cz/{}/?{}'.format(lang, qs))
soup = BeautifulSoup(resp.read(), 'html.parser')

results = soup.find('div', id='results')
h1 = results.find('h1')
found = None
if h1:
    found = h1.string
pron = soup.find('p', {'class': 'pron'})
play = soup.find('a', id='playsound')
mistype = soup.find('ul', class_='mistype')

# header
if not found:
    raise ValueError('Not found: {}'.format(term))
if found.lower() != term.lower():
    print(e("BAD SPELL"), end=' ')
print(found, end='')
if pron:
    print(' {}'.format(pron.string), end='')
if mistype:
    print('', e("NOT FOUND"), end='')
print()

if mistype:
    print()
    print("DID YOU MEAN")
    for w in mistype.find_all('li'):
        bullterms(w)
    if mistype:
        exit(0)

fast = soup.find('div', id='fastMeanings')

# fast meanings
for w in fast.find_all('td'):
    bullterms(w)

if options.all:
    # advanced grammar
    advg = soup.find('h3')
    if advg:
        print()
        print(advg.string.upper())
        for morf in soup.find_all('span', class_='morf'):
            print(morf.string)
            for w in morf.find_next('ol').find_all('dl'):
                bullterms(w.find('dt'))
                dd = w.find('dd')
                if dd:
                    bullterms(dd)

    # other groups of related words
    for g in soup.find_all('p', class_='morf'):
        terms = g.find_next('div', class_='other-meaning')
        if not terms:
            continue
        print()
        print(g.string.upper())
        for a in terms.find_all('a'):
            print(bull(textify(a)))

    ftexts = soup.find_all('ul', id='fulltext')
    if len(ftexts):
        print()
        print("FULLTEXT")
        for ftext in ftexts:
            for li in ftext.find_all('li'):
                bullterms(li)

if options.pron:
    if play:
        href = play['href']
        url = 'https://slovnik.seznam.cz/{}'.format(href)
        subprocess.call(['mpv', '--really-quiet', url], stdout=None, stdin=None)
    else:
        print()
        print(e("PRONUNCIATION NOT AVAILABLE"))
